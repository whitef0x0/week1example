{
  "name": "port",
  "version": "0.7.1",
  "author": {
    "name": "Enrique Erne",
    "url": "http://mild.ch/"
  },
  "description": "Spawn Pd (Pure Data) and communicate through TCP sockets",
  "keywords": [
    "puredata",
    "pd",
    "fudi",
    "tcp",
    "dsp",
    "signal",
    "audio"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/thisconnect/port.git"
  },
  "homepage": "https://github.com/thisconnect/port",
  "contributors": [
    {
      "name": "Enrique Erne"
    }
  ],
  "main": "port",
  "devDependencies": {
    "mocha": ">= 1.16.2",
    "expect.js": "0.2.0"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://raw.github.com/thisconnect/port/master/license"
    }
  ],
  "bugs": {
    "url": "https://github.com/thisconnect/port/issues"
  },
  "readme": "# Port\n\nA Node.js module to spawn and communicate with Pure Data (aka Pd).\n\n\n\nExample\n-------\n\n```js\nvar port = require('port');\n\nport({\n\tread: 8004,\n\twrite: 8005,\n\tflags: ['-noprefs', '-send', 'pd dsp 1, dsp 0', './examples/simple/port.pd']\n})\n.on('connect', function(){\n\tthis.write('Hello Pd!;\\n');\n})\n.on('data', function(data){\n\tconsole.log(data);\n})\n.create();\n```\n\n\n\nInstall\n-------\n\n```bash\nnpm install port\n```\n\n\n\nAPI\n---\n\n### Constructor: Port\n\n```js\nvar Port = require('port');\n\nvar pd = new Port(options);\n```\n\nThe `new` keyword is optional.\n\n##### Options\n\n  - `host` - (string) The domain of the Pd process. Defaults to localhost.\n  - `read` - (number | null) The port to listen to Pd's [netsend]. \n  Defaults to null.\n  - `write` - (number | null) The port to connect to Pd's [netreceive]. \n  Defaults to null.\n  - `encoding` - (ascii | utf8 | base64 | hex | null)\n  The encoding of the read and write socket, \n  [nodejs.org/api/stream.html#stream_stream_setencoding_encoding](http://nodejs.org/api/stream.html#stream_stream_setencoding_encoding)\n  Defaults to null.\n  - `max` - (number) Limits amount of incoming connections. Defaults to 1.\n  - `pd` - (string) The command or location to spawn the Pd process. \n  Defaults to an absolute path to the Pd binary on OS X.\n  Defaults to 'pd' on Linux.\n  - `flags` - (array|object) The command line arguments for the Pd process. \n  Expects an array of arguments. Read more about Pd's configuration flags on \n  [crca.ucsd.edu/~msp/Pd_documentation/x3.htm#s4](http://crca.ucsd.edu/~msp/Pd_documentation/x3.htm#s4) . \n  Defaults to [].\n\n\n\nMethods\n-------\n\n\n### Method: Port.create\n\n1. Spawns the Pd process.\n2. Listens for an incoming socket connection.\n3. Connects to on the write port.\n\nEach of the 3 steps are individually executed depending on the configuraion options.\n\n```js\npd.create();\n```\n\n\n\n### Method: Port.destroy\n\nKills the Pd process and ends all open connections. \n\n```js\npd.destroy();\n```\n\n\n\n### Method: Port.write\n\nSends a paket containing one or many messages to Pd's [netreceive].\n\nWARNING: write does not check if the write socket is ready and may error!\n\n```js\npd.write('Hello Pd!;\\n');\n```\n\n##### Arguments\n\n1. Data (string) - the packet to send to the write socket.\n\n\n\nEvents\n------\n\nPort is an event emitter see also\n[nodejs.org/api/events.html](http://nodejs.org/api/events.html)\n\n\n\n### Event: listening\n\nFires if the `read` port is specified and after Port.create is called.\nAt this point Port is waiting for an incoming TCP connection from Pd's [netsend].\n\n```js\npd.on('listening', function(){ });\n```\n\n\n\n### Event: connection\n\nFires when Pd connects and the `read` port is specified.\n\n```js\npd.on('connection', function(socket){ });\n```\n\n##### Arguments\n\n1. Socket (object) - Exposes the socket connection from [netsend].\n\n\n\n### Event: connect\n\nFires when Port connects to Pd on the write port. \n\n```js\npd.on('connect', function(socket){ });\n```\n\n##### Arguments\n\n1. Socket (object) - Exposes the socket connection to [netreceive].\n\n\n\n### Event: data\n\nFires when Pd sends a message with [netsend]. \n\n```js\npd.on('data', function(data){ });\n```\n\n##### Arguments\n\n1. Data - a buffer object or a string (if encoding is not null).\n\n\n\n### Event: stderr\n\nFires on every message that is written to the console the [print] object \nor anything else. This event is only available with `-stderr` or `-nogui` flag.\n\n```js\npd.on('stderr', function(buffer){ });\n```\n\n##### Arguments\n\n1. Buffer - the stderr buffer object.\n\n\n\n### Event: destroy\n\nFires after the destroy method is called. \n\n```js\npd.on('destroy', function(){ });\n```\n\n\n\nTests\n-----\n\n```bash\nmake test\n```\n\n\n\nExamples\n--------\n\nSome examples are only proof of concept and are not optimized for best performance.\n\n```bash\nnode examples/testing/division.js\n\nnode examples/manipulation/server.js\n```\n\n\n\nRequires\n--------\n\n  - Vanilla Pure Data from \n  [crca.ucsd.edu/~msp/software.html](http://crca.ucsd.edu/~msp/software.html)\n  or Pd-extended from [puredata.info/downloads](http://puredata.info/downloads).\n  - Node.js from [nodejs.org](http://nodejs.org/).\n",
  "readmeFilename": "readme.md",
  "_id": "port@0.7.1",
  "dist": {
    "shasum": "db4f532fa1aec604968460b8a3de76b8cfb7c905"
  },
  "_from": "port@",
  "_resolved": "https://registry.npmjs.org/port/-/port-0.7.1.tgz"
}
